@page "/Details/{Id}"
@inject AuthenticationStateProvider authenticationProvider
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navigationManager

<h1>Suggestion Details</h1>
<div>
    <div>
        @if (suggestion is not null)
        {
            <div>
                <div>
                    <div @onclick="VoteUp">
                        <div>@GetUpvoteTopText()</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText()</div>
                    </div>
                    <div>
                        <div>@suggestion.DateCreated.ToString("MM.dd.yyyy")</div>
                    </div>
                </div>
                <div>
                    <div>@suggestion.Suggestion</div>
                    <div>@suggestion.Author.DisplayName</div>
                    <div>@suggestion.Description</div>
                    <div>@suggestion.Category.CategoryName</div>
                </div>
                <div>
                    <button type="button" @onclick="ClosePage">Go Back</button>
                </div>
            </div>
        }
    </div>
</div>

@if (suggestion?.SuggestionStatus is not null)
{
    <div>
    <div>
        <div></div>
        <div>
            <div>
                @suggestion.SuggestionStatus.StatusName
            </div>
            <div>
                @((MarkupString)suggestion.OwnerNotes)
            </div>
        </div>
    </div>
</div>
}

@code {
    [Parameter]
    public string Id { get; set; } = String.Empty;

    private SuggestionModel suggestion = new();
    private UserModel authenticatedUser = new();

    protected override async Task OnInitializedAsync()
    {
        suggestion = await suggestionData.GetSuggestionAsync(Id);
        authenticatedUser = await authenticationProvider.GetUserFromAuthAsync(userData);
    }

    private async Task VoteUp()
    {
        if (authenticatedUser is not null)
        {
            if (suggestion.Author.Id == authenticatedUser.Id)
            {
                // Can't vote on your own suggerstion
                return;
            }
            if (suggestion.UserVotes.Add(authenticatedUser.Id) == false)
            {
                suggestion.UserVotes.Remove(authenticatedUser.Id);
            }
            await suggestionData.UpvoteSuggestionAsync(suggestion.Id, authenticatedUser.Id);
        }
        else
        {
            navigationManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private void ClosePage()
    {
        navigationManager.NavigateTo("/");
    }

    private string GetUpvoteTopText()
    {
        var label = suggestion.Author.Id == authenticatedUser?.Id ? "Awaiting" : "Click To";
        return suggestion.UserVotes.Count > 0 ? suggestion.UserVotes.Count.ToString("00") : label;
    }

    private string GetUpvoteBottomText()
    {
        return suggestion.UserVotes.Count > 1 ? "Upvotes" : "Upvote";
    }

}