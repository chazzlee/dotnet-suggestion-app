@page "/Create"
@attribute [Authorize]
@using SuggestionAppUI.Components
@using SuggestionAppUI.Models
@inject AuthenticationStateProvider authenticationProvider
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navigationManager

<h1>Make a Suggestion</h1>
<div>
    <div>
        <div>
            <button type="button" @onclick="ClosePage">Go Back</button>
        </div>
        @if (categories is not null)
        {
            <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label for="suggestion-text">Suggestion</label>
                    <p>Focus on the topic or technology you want to learn about.</p>
                    <InputText id="suggestion-text" @bind-Value="suggestion.Suggestion" />
                </div>
                <div>
                    <label for="category">Category</label>
                    <p>Choose one category.</p>
                    <div>
                        <CustomRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                            @foreach (var category in categories)
                            {
                            <div>
                                <InputRadio Value="@category.Id" id="@category.Id" />
                                <label for="@category.Id">@category.CategoryName - @category.CategoryDescription</label>
                            </div>
                            }
                    </CustomRadioGroup>
                </div>
            </div>
            <div>
                <label for="description">Description</label>
                <p>Briefly describe your suggestion.</p>
                <InputTextArea id="description" @bind-Value="suggestion.Description" />
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
        }
    </div>
</div>

@code {
    private CreateSuggestionModel suggestion = new();
    private List<CategoryModel> categories = new();
    private UserModel authenticatedUser = new();
    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategoriesAsync();
        authenticatedUser = await authenticationProvider.GetUserFromAuthAsync(userData);
    }

    private void ClosePage()
    {
        navigationManager.NavigateTo("/");
    }

    private async Task CreateSuggestion()
    {
        var newSuggestion = new SuggestionModel();
        newSuggestion.Suggestion = suggestion.Suggestion;
        newSuggestion.Description = suggestion.Description;
        newSuggestion.Author = new BasicUserModel(authenticatedUser);

        var category = categories.Where(category => category.Id == suggestion.CategoryId).FirstOrDefault();
        if (category is null)
        {
            suggestion.CategoryId = "";
            return;
        }
        else
        {
            newSuggestion.Category = category;
        }

        await suggestionData.CreateSuggestionAsync(newSuggestion);
        suggestion = new();
        ClosePage();
    }
}