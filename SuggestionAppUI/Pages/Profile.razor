@page "/Profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authenticationProvider
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navigationManager

<h1>My Profile</h1>
<div>
    <div>
        <button type="button" @onclick="ClosePage">Go Back</button>
    </div>
</div>
<div>
    <h2>My Account</h2>
    <p>
        <a href="MicrosoftIdentity/Account/EditProfile">Edit My Profile</a>
    </p>
</div>

<SuggestionList 
    Title="Approved Suggestions" 
    SubTitle="These are your suggestions that are currently active."
    Suggestions="@approved" />

<SuggestionList 
    Title="Archived Suggestions" 
    SubTitle="These are your suggestions that were active but did not gain enough traction."
    Suggestions="@archived" />

<SuggestionList 
    Title="Pending Suggestions" 
    SubTitle="These are your suggestions that have not yet been reviewed by the administrators."
    Suggestions="@pending" />

<SuggestionList 
    Title="Rejected Suggestions" 
    SubTitle="These are your suggestions that were not deemed to be appropriate for the training suggestion site."
    Suggestions="@rejected" />

@code {
    private UserModel authenticatedUser = new();
    private List<SuggestionModel> submissions = new();
    private List<SuggestionModel> approved = new();
    private List<SuggestionModel> archived = new();
    private List<SuggestionModel> pending = new();
    private List<SuggestionModel> rejected = new();

    protected override async Task OnInitializedAsync()
    {
        authenticatedUser = await authenticationProvider.GetUserFromAuthAsync(userData);
        var result = await suggestionData.GetSuggestionsByUserAsync(authenticatedUser.Id);

        if (authenticatedUser is not null && result is not null)
        {
            submissions = result.OrderByDescending(submission => submission.DateCreated).ToList();
            approved = submissions
            .Where(
            submission => submission.ApprovedForRelease && submission.Archived == false &&
            submission.Rejected == false
            ).ToList();
            archived = submissions
            .Where(submission => submission.Archived && submission.Rejected == false)
            .ToList();
            pending = submissions.Where(submission => submission.ApprovedForRelease == false && submission.Rejected ==
            false).ToList();
            rejected = submissions.Where(submission => submission.Rejected).ToList();
        }
    }

    private void ClosePage()
    {
        navigationManager.NavigateTo("/");
    }
}