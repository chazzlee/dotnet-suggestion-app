@page "/"
@inject AuthenticationStateProvider authenticationProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navigationManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Training Suggestions</h1>

<div class="suggestion-container">
    <button type="button" class="btn btn-outline-light btn-lg text-uppercase suggest-btn" @onclick="LoadCreatePage">
        Suggest
    </button>
</div>

<div class="row">
    <div class="suggestions-count col-md-4 text-light mt-2">@GetSuggestionText()</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button type="button" class="btn btn-order text-white @SortedByNewClass(true)"
            @onclick="(() => OrderByNew(true))">
            New
        </button>
        <button type="button" class="btn btn-order text-white @SortedByNewClass(false)"
            @onclick="(() => OrderByNew(false))">
            Popular
        </button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="search" class="form-control rounded-control" name="search" id="search" aria-label="Search box"
            placeholder="Search..."
            @oninput="((text) => OnSearchInput(text.Value is not null ? (string)text.Value : String.Empty))" />
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="suggestion" OverscanCount="10">
                <div class="suggestion-entry">
                    <div class="@GetVoteClass(suggestion)" @onclick="(() => VoteUp(suggestion))">
                        <div class="text-uppercase">@GetUpvoteTopText(suggestion)</div>
                        <span class="oi oi-caret-top" style="font-size: 3rem;"></span>
                        <div class="text-uppercase">@GetUpvoteBottomText(suggestion)</div>
                    </div>
                    <div class="suggestion-entry-text">
                        <div class="suggestion-entry-text-title" @onclick="(() => OpenDetails(suggestion))">
                            @suggestion.Suggestion
                        </div>
                        <div>
                            <div class="suggestion-entry-text-category" @onclick="(() => OpenDetails(suggestion))">
                                @suggestion.Category.CategoryName
                            </div>
                        </div>
                    </div>
                    <div class="suggestion-entry-status @GetSuggestionStatusClass(suggestion)">
                        <div class="suggestion-entry-status-text">
                            @suggestion.SuggestionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if (categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Category</span>
                <div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">All</div>
                @foreach (var category in categories)
                {
                    <div class="@GetSelectedCategory(category.CategoryName)"
                @onclick="(() => OnCategoryClick(category.CategoryName))">
                        @category.CategoryName
                    </div>
                }
            </div>
        }

        @if (statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div class="@GetSelectedStatus()" @onclick="(() => OnStatusClick())">All</div>
                @foreach (var status in statuses)
                {
                    <div class="@GetSelectedStatus(status.StatusName)" @onclick="(() => OnStatusClick(status.StatusName))">
                        @status.StatusName
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private UserModel authenticatedUser = new();
    private List<SuggestionModel> suggestions = new();
    private List<CategoryModel> categories = new();
    private List<StatusModel> statuses = new();
    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    private bool isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategoriesAsync();
        statuses = await statusData.GetStatusesAsync();
        await LoadAndVerifyUser();
    }

    private void LoadCreatePage()
    {
        if (authenticatedUser is not null)
        {
            navigationManager.NavigateTo("/Create");
        }
        else
        {
            navigationManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var objectId = authState.User.Claims.FirstOrDefault(claim => claim.Type.Contains("objectidentifier"))?.Value;
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            authenticatedUser = await userData.GetUserFromAuthenticationAsync(objectId) ?? new();
            var firstName = authState.User.Claims.FirstOrDefault(claim => claim.Type.Contains("givenname"))?.Value;
            var lastName = authState.User.Claims.FirstOrDefault(claim => claim.Type.Contains("surname"))?.Value;
            var displayName = authState.User.Claims.FirstOrDefault(claim => claim.Type.Equals("name"))?.Value;
            var email = authState.User.Claims.FirstOrDefault(claim => claim.Type.Contains("email"))?.Value;

            var isDirty = false;
            if (objectId.Equals(authenticatedUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                authenticatedUser.ObjectIdentifier = objectId;
            }
            if (firstName?.Equals(authenticatedUser.FirstName) == false)
            {
                isDirty = true;
                authenticatedUser.FirstName = firstName;
            }
            if (lastName?.Equals(authenticatedUser.LastName) == false)
            {
                isDirty = true;
                authenticatedUser.LastName = lastName;
            }
            if (displayName?.Equals(authenticatedUser.DisplayName) == false)
            {
                isDirty = true;
                authenticatedUser.DisplayName = displayName;
            }
            if (email?.Equals(authenticatedUser.EmailAddress) == false)
            {
                isDirty = true;
                authenticatedUser.EmailAddress = email;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(authenticatedUser.Id))
                {
                    await userData.CreateUser(authenticatedUser);
                }
                else
                {
                    await userData.UpdateUser(authenticatedUser);
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var categoryInSession = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = categoryInSession.Success && categoryInSession.Value is not null ? categoryInSession.Value : "All";

        var statusInSession = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = statusInSession.Success && statusInSession.Value is not null ? statusInSession.Value : "All";

        var searchInSession = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = searchInSession.Success && searchInSession.Value is not null ? searchInSession.Value : "";

        var sortInSession = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = sortInSession.Success ? sortInSession.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetApprovedSuggestionsAsync();
        if (selectedCategory != "All")
        {
            output = output.Where(suggestion => suggestion.Category.CategoryName == selectedCategory).ToList();
        }
        if (selectedStatus != "All")
        {
            output = output.Where(suggestion => suggestion.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(suggestion => suggestion.Suggestion.Contains(searchText,
            StringComparison.InvariantCultureIgnoreCase) || suggestion.Description.Contains(searchText,
            StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        if (isSortedByNew)
        {
            output = output.OrderByDescending(suggestion => suggestion.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(suggestion => suggestion.UserVotes.Count).ThenByDescending(suggestion =>
            suggestion.DateCreated).ToList();
        }

        suggestions = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private string GetSuggestionText()
    {
        return suggestions.Count == 1 ? $"{suggestions.Count} Suggestion" : $"{suggestions.Count} Suggestions";
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if (authenticatedUser.Id == String.Empty)
        {
            navigationManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
        else
        {
            if (suggestion.Author.Id == authenticatedUser.Id)
            {
                // Can't vote on your own suggerstion
                return;
            }
            if (suggestion.UserVotes.Add(authenticatedUser.Id) == false)
            {
                suggestion.UserVotes.Remove(authenticatedUser.Id);
            }
            await suggestionData.UpvoteSuggestionAsync(suggestion.Id, authenticatedUser.Id);

            if (isSortedByNew == false)
            {
                suggestions = suggestions
                .OrderByDescending(suggestion => suggestion.UserVotes.Count)
                .ThenByDescending(suggestion => suggestion.DateCreated)
                .ToList();
            }
        }
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        var label = suggestion.Author.Id == authenticatedUser.Id ? "Awaiting" : "Click To";
        return suggestion.UserVotes.Count > 0 ? suggestion.UserVotes.Count.ToString("00") : label;
    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        return suggestion.UserVotes.Count > 1 ? "Upvotes" : "Upvote";
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navigationManager.NavigateTo($"/Details/{suggestion.Id}");
    }

    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "sort-selected";
        }

        return "";
    }

    private string GetVoteClass(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-entry-no-votes";
        }
        else if (suggestion.UserVotes.Contains(authenticatedUser.Id))
        {
            return "suggestion-entry-voted";
        }
        else
        {
            return "suggestion-entry-not-voted";
        }
    }

    private string GetSuggestionStatusClass(SuggestionModel suggestion)
    {
        if (suggestion is null || suggestion.SuggestionStatus is null)
        {
            return "suggestion-entry-status-none";
        }
        string output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-entry-status-completed",
            "Watching" => "suggestion-entry-status-watching",
            "Upcoming" => "suggestion-entry-status-upcoming",
            "Dismissed" => "suggestion-entry-status-dismissed",
            _ => "suggestion-entry-status-none"
        };
        return output;
    }

    private string GetSelectedCategory(string category = "All")
    {
        if (category == selectedCategory)
        {
            return "selected-category";
        }
        return "";
    }

    private string GetSelectedStatus(string status = "All")
    {
        if (status == selectedStatus)
        {
            return "selected-status";
        }
        return "";
    }
}