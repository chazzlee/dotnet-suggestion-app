@page "/"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navigationManager
@inject ProtectedSessionStorage sessionStorage

@code {
    private List<SuggestionModel> suggestions = new();
    private List<CategoryModel> categories = new();
    private List<StatusModel> statuses = new();
    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    private bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategoriesAsync();
        statuses = await statusData.GetStatusesAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var categoryInSession = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = categoryInSession.Success && categoryInSession.Value is not null ? categoryInSession.Value : "All";

        var statusInSession = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = statusInSession.Success && statusInSession.Value is not null ? statusInSession.Value : "All";

        var searchInSession = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = searchInSession.Success && searchInSession.Value is not null ? searchInSession.Value : "";

        var sortInSession = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = sortInSession.Success ? sortInSession.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetApprovedSuggestionsAsync();
        if (selectedCategory != "All")
        {
            output = output.Where(suggestion => suggestion.Category.CategoryName == selectedCategory).ToList();
        }
        if (selectedStatus != "All")
        {
            output = output.Where(suggestion => suggestion.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(suggestion => suggestion.Suggestion.Contains(searchText,
            StringComparison.InvariantCultureIgnoreCase) || suggestion.Description.Contains(searchText,
            StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        if (isSortedByNew)
        {
            output = output.OrderByDescending(suggestion => suggestion.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(suggestion => suggestion.UserVotes.Count).ThenByDescending(suggestion =>
            suggestion.DateCreated).ToList();
        }

        suggestions = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        return suggestion.UserVotes.Count > 0 ? suggestion.UserVotes.Count.ToString("00") : "Click To";
    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        return suggestion.UserVotes.Count > 1 ? "Upvotes" : "Upvote";
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navigationManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}